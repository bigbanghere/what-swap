{
  "version": 3,
  "sources": ["../../../src/index.ts"],
  "sourceRoot": "C:\\BigBang\\what-swap\\.wrangler\\tmp\\deploy-QpxR5q",
  "sourcesContent": ["import { DurableObject } from \"cloudflare:workers\";\n\n/**\n * Welcome to Cloudflare Workers! This is your first Durable Objects application.\n *\n * - Run `npm run dev` in your terminal to start a development server\n * - Open a browser tab at http://localhost:8787/ to see your Durable Object in action\n * - Run `npm run deploy` to publish your application\n *\n * Bind resources to your worker in `wrangler.jsonc`. After adding bindings, a type definition for the\n * `Env` object can be regenerated with `npm run cf-typegen`.\n *\n * Learn more at https://developers.cloudflare.com/durable-objects\n */\n\n\n/** A Durable Object's behavior is defined in an exported Javascript class */\nexport class MyDurableObject extends DurableObject {\n\t/**\n\t * The constructor is invoked once upon creation of the Durable Object, i.e. the first call to\n\t * \t`DurableObjectStub::get` for a given identifier (no-op constructors can be omitted)\n\t *\n\t * @param ctx - The interface for interacting with Durable Object state\n\t * @param env - The interface to reference bindings declared in wrangler.jsonc\n\t */\n\tconstructor(ctx: DurableObjectState, env: Env) {\n\t\tsuper(ctx, env);\n\t}\n\n\t/**\n\t * The Durable Object exposes an RPC method sayHello which will be invoked when when a Durable\n\t *  Object instance receives a request from a Worker via the same method invocation on the stub\n\t *\n\t * @param name - The name provided to a Durable Object instance from a Worker\n\t * @returns The greeting to be sent back to the Worker\n\t */\n\tasync sayHello(name: string): Promise<string> {\n\t\treturn `Hello, ${name}!`;\n\t}\n}\n\nexport default {\n\t/**\n\t * This is the standard fetch handler for a Cloudflare Worker\n\t *\n\t * @param request - The request submitted to the Worker from the client\n\t * @param env - The interface to reference bindings declared in wrangler.jsonc\n\t * @param ctx - The execution context of the Worker\n\t * @returns The response to be sent back to the client\n\t */\n\tasync fetch(request, env, ctx): Promise<Response> {\n\t\t// Create a stub to open a communication channel with the Durable Object\n\t\t// instance named \"foo\".\n\t\t//\n\t\t// Requests from all Workers to the Durable Object instance named \"foo\"\n\t\t// will go to a single remote Durable Object instance.\n\t\tconst stub = env.MY_DURABLE_OBJECT.getByName(\"foo\");\n\n\t\t// Call the `sayHello()` RPC method on the stub to invoke the method on\n\t\t// the remote Durable Object instance.\n\t\tconst greeting = await stub.sayHello(\"world\");\n\n\t\treturn new Response(greeting);\n\t},\n} satisfies ExportedHandler<Env>;\n"],
  "mappings": ";;;;AAAA,SAAS,qBAAqB;AAiBvB,IAAM,kBAAN,cAA8B,cAAc;AAAA,EAjBnD,OAiBmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQlD,YAAY,KAAyB,KAAU;AAC9C,UAAM,KAAK,GAAG;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,SAAS,MAA+B;AAC7C,WAAO,UAAU,IAAI;AAAA,EACtB;AACD;AAEA,IAAO,gBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASd,MAAM,MAAM,SAAS,KAAK,KAAwB;AAMjD,UAAM,OAAO,IAAI,kBAAkB,UAAU,KAAK;AAIlD,UAAM,WAAW,MAAM,KAAK,SAAS,OAAO;AAE5C,WAAO,IAAI,SAAS,QAAQ;AAAA,EAC7B;AACD;",
  "names": []
}
